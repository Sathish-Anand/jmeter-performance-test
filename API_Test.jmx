<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Applications" enabled="true"/>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CORE API" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create a Location" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;locationRef&quot;: &quot;A-${__RandomString(4,qwertyuiopasdfghjklzxcvbnm)}&quot;,&#xd;
 &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
 &quot;name&quot;: &quot;SGR Shop&quot;,&#xd;
 &quot;email&quot;: &quot;sagrtest264@mailinator.com&quot;,&#xd;
 &quot;supportPhone&quot;: &quot;13243533&quot;,&#xd;
 &quot;type&quot;: &quot;STORE&quot;,&#xd;
 &quot;timeZone&quot;: &quot;Australia/Sydney&quot;,&#xd;
 &#xd;
 &quot;pickAndPackTimeLimit&quot;: 10,&#xd;
 &#xd;
 &quot;directions&quot;: &quot;location API create Test directions&quot;,&#xd;
 &#xd;
 &quot;agentNetworks&quot;: [&quot;29&quot;,&quot;28&quot;,&quot;17&quot;],&#xd;
 &#xd;
 &quot;address&quot; : {&#xd;
     &quot;city&quot;: &quot;Sydney&quot;,&#xd;
     &quot;country&quot;: &quot;Australia&quot;,&#xd;
     &quot;postcode&quot;: &quot;2010&quot;,&#xd;
     &quot;state&quot;: &quot;NSW&quot;,&#xd;
     &quot;street&quot;: &quot;327 crown street&quot;,&#xd;
     &quot;latitude&quot;: &quot;-33.52545&quot;,&#xd;
     &quot;longitude&quot;: &quot;151.214408&quot;&#xd;
 },&#xd;
 &quot;openingHours&quot; : {&#xd;
     &quot;monStartMin&quot;: &quot;0900&quot;,&#xd;
     &quot;monEndMin&quot;: &quot;1800&quot;,&#xd;
     &quot;tueStartMin&quot;: &quot;0900&quot;,&#xd;
     &quot;tueEndMin&quot;: &quot;1800&quot;,&#xd;
     &quot;wedStartMin&quot;: &quot;0900&quot;,&#xd;
     &quot;wedEndMin&quot;: &quot;1800&quot;,&#xd;
     &quot;thuStartMin&quot;: &quot;0900&quot;,&#xd;
     &quot;thuEndMin&quot;: &quot;1800&quot;,&#xd;
     &quot;friStartMin&quot;: &quot;0900&quot;,&#xd;
     &quot;friEndMin&quot;: &quot;1800&quot;,&#xd;
     &quot;satStartMin&quot;: &quot;0900&quot;,&#xd;
     &quot;satEndMin&quot;: &quot;1800&quot;,&#xd;
     &quot;sunStartMin&quot;: &quot;0900&quot;,&#xd;
     &quot;sunEndMin&quot;: &quot;1900&quot;&#xd;
 },&#xd;
 &#xd;
 &quot;storageAreas&quot;: [&#xd;
   &quot;ABC&quot; ,&#xd;
   &quot;DEF&quot;&#xd;
 ]&#xd;
 &#xd;
&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${api_server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/${api_version}/location</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Location ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">location_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NULL</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Location" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${api_server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/${api_version}/location/${location_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Location Ref Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">location_ref</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;locationRef&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NULL</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update a Location" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;locationRef&quot;: &quot;${location_ref}&quot;,&#xd;
 &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
 &quot;name&quot;: &quot;SGR Shop&quot;,&#xd;
 &quot;email&quot;: &quot;sagrtest264@mailinator.com&quot;,&#xd;
 &quot;supportPhone&quot;: &quot;13243533&quot;,&#xd;
 &quot;type&quot;: &quot;STORE&quot;,&#xd;
 &quot;timeZone&quot;: &quot;Australia/Sydney&quot;,&#xd;
 &#xd;
 &quot;pickAndPackTimeLimit&quot;: 10,&#xd;
 &#xd;
 &quot;directions&quot;: &quot;location API create Test directions&quot;,&#xd;
 &#xd;
 &quot;agentNetworks&quot;: [&quot;29&quot;,&quot;28&quot;,&quot;17&quot;],&#xd;
 &#xd;
 &quot;address&quot; : {&#xd;
     &quot;city&quot;: &quot;Sydney&quot;,&#xd;
     &quot;country&quot;: &quot;Australia&quot;,&#xd;
     &quot;postcode&quot;: &quot;2010&quot;,&#xd;
     &quot;state&quot;: &quot;NSW&quot;,&#xd;
     &quot;street&quot;: &quot;327 crown street&quot;,&#xd;
     &quot;latitude&quot;: &quot;-33.52545&quot;,&#xd;
     &quot;longitude&quot;: &quot;151.214408&quot;&#xd;
 },&#xd;
 &quot;openingHours&quot; : {&#xd;
     &quot;monStartMin&quot;: &quot;0900&quot;,&#xd;
     &quot;monEndMin&quot;: &quot;1800&quot;,&#xd;
     &quot;tueStartMin&quot;: &quot;0900&quot;,&#xd;
     &quot;tueEndMin&quot;: &quot;1800&quot;,&#xd;
     &quot;wedStartMin&quot;: &quot;0900&quot;,&#xd;
     &quot;wedEndMin&quot;: &quot;1800&quot;,&#xd;
     &quot;thuStartMin&quot;: &quot;0900&quot;,&#xd;
     &quot;thuEndMin&quot;: &quot;1800&quot;,&#xd;
     &quot;friStartMin&quot;: &quot;0900&quot;,&#xd;
     &quot;friEndMin&quot;: &quot;1800&quot;,&#xd;
     &quot;satStartMin&quot;: &quot;0900&quot;,&#xd;
     &quot;satEndMin&quot;: &quot;1800&quot;,&#xd;
     &quot;sunStartMin&quot;: &quot;0900&quot;,&#xd;
     &quot;sunEndMin&quot;: &quot;1900&quot;&#xd;
 },&#xd;
 &#xd;
 &quot;storageAreas&quot;: [&#xd;
   &quot;ABC&quot; ,&#xd;
   &quot;DEF&quot;&#xd;
 ]&#xd;
 &#xd;
&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${api_server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/${api_version}/location/${location_id}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Location ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">location_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NULL</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create a Category" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;retailerId&quot;:&quot;${retailer_id}&quot;,&#xd;
    &quot;name&quot;:&quot;SGR Category&quot;,&#xd;
    &quot;categoryRef&quot;:&quot;${__RandomString(4,qwertyuiopasdfghjklzxcvbnm)}-${Random_String1}&quot;,&#xd;
    &quot;parentCategoryRef&quot;:&quot;SGR Parent Categ1&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${api_server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/${api_version}/category</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Category ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">category_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NULL</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Category" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${api_server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/${api_version}/category/${category_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Category ref Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">category_ref</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;categoryRef&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NULL</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="GQL API" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ORDERS QUERY" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;query&quot;:&quot;{\n  orders {\n    edges {\n      node {\n        id\n        \n      }\n    }\n  }\n}&quot;,&quot;variables&quot;:null,&quot;operationName&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${api_server}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert HTTP Status OK" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">batchIds</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.batch[*].batchId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VARIANT PRODUCTS QUERY" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;query&quot;:&quot;{\n  variantProduct(catalogue:{ref:\&quot;COMPATIBILITY:1\&quot;} ref:\&quot;${sku}\&quot;){\n    id\n                ref\n    name\n  }\n}&quot;,&quot;variables&quot;:null,&quot;operationName&quot;:null}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${api_server}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert HTTP Status OK" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">batchIds</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.batch[*].batchId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Event API" enabled="true">
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Event POST API-ORCHESTRATION-ORDER" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;accountId&quot;: &quot;${account_id}&quot;,&#xd;
  &quot;retailerId&quot;: &quot;${retailer_id}&quot;,&#xd;
  &quot;name&quot;: &quot;CREATE&quot;,&#xd;
  &quot;type&quot;: &quot;ORCHESTRATION&quot;,&#xd;
  &quot;context&quot;:{&quot;entityType&quot;:&quot;ORDER&quot;,&quot;entityId&quot;:&quot;100&quot;,&quot;rootEntityType&quot;:&quot;&quot;,&quot;rootEntityId&quot;:&quot;&quot;},&#xd;
  &quot;category&quot;:&quot;Order Workflow&quot;,&#xd;
  &quot;source&quot;: &quot;Source attribute value&quot;,&#xd;
  &quot;scheduledOn&quot;: &quot;2017-02-22T04:18:18.806+0000&quot;,&#xd;
  &quot;attributes&quot;: [{&quot;name&quot;: &quot;entityId&quot;, &quot;type&quot;: &quot;STRING&quot;, &quot;value&quot;: &quot;434877&quot;}, {&quot;name&quot;: &quot;entityType&quot;, &quot;type&quot;: &quot;STRING&quot;, &quot;value&quot;: &quot;RETURN&quot;}, {&quot;name&quot;: &quot;type&quot;, &quot;type&quot;: &quot;STRING&quot;, &quot;value&quot;: &quot;CANNOT_FULFIL&quot;}, {&quot;name&quot;: &quot;status&quot;, &quot;type&quot;: &quot;STRING&quot;, &quot;value&quot;: &quot;CREATED&quot;}, {&quot;name&quot;: &quot;returnId&quot;, &quot;type&quot;: &quot;STRING&quot;, &quot;value&quot;: &quot;434877&quot;}, {&quot;name&quot;: &quot;returnRef&quot;, &quot;type&quot;: &quot;STRING&quot;, &quot;value&quot;: &quot;86a19a6a-1f64-4dc3-814d-4e3061a3d6d4&quot;}, {&quot;name&quot;: &quot;orderId&quot;, &quot;type&quot;: &quot;STRING&quot;, &quot;value&quot;: &quot;434788&quot;}, {&quot;name&quot;: &quot;orderRef&quot;, &quot;type&quot;: &quot;STRING&quot;, &quot;value&quot;: &quot;SEEDAUTEST150201&quot;},{&#xd;
    &quot;name&quot;: &quot;reference&quot;,&#xd;
    &quot;type&quot;: &quot;string&quot;,&#xd;
    &quot;value&quot;: &quot;ECP:123XDR&quot;&#xd;
  }],&#xd;
  &quot;meta&quot;: {&#xd;
    &quot;mode&quot;: &quot;ASYNC&quot;,&#xd;
    &quot;models&quot;: [&quot;INLINE MODE1&quot;],&#xd;
    &quot;simulation&quot;: true,&#xd;
    &quot;workflow&quot;: null&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${api_host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/${api_version}/${api_mapping}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">event_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot; : &quot;(.*)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Scope.variable">token</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert HTTP Status OK" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Event PUT API-ORCHESTRATION-ORDER-AUDIT" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;accountId&quot;: &quot;${account_id}&quot;,&#xd;
  &quot;retailerId&quot;: &quot;${retailer_id}&quot;,&#xd;
  &quot;name&quot;: &quot;CREATE&quot;,&#xd;
  &quot;type&quot;: &quot;ORCHESTRATION&quot;,&#xd;
  &quot;context&quot;:{&quot;entityType&quot;:&quot;ORDER&quot;,&quot;entityId&quot;:&quot;100&quot;,&quot;rootEntityType&quot;:&quot;&quot;,&quot;rootEntityId&quot;:&quot;&quot;},&#xd;
  &quot;category&quot;:&quot;Order Workflow&quot;,&#xd;
  &quot;source&quot;: &quot;Source attribute value&quot;,&#xd;
  &quot;scheduledOn&quot;: &quot;2017-02-22T04:18:18.806+0000&quot;,&#xd;
  &quot;attributes&quot;: [{&quot;name&quot;: &quot;entityId&quot;, &quot;type&quot;: &quot;STRING&quot;, &quot;value&quot;: &quot;434877&quot;}, {&quot;name&quot;: &quot;entityType&quot;, &quot;type&quot;: &quot;STRING&quot;, &quot;value&quot;: &quot;RETURN&quot;}, {&quot;name&quot;: &quot;type&quot;, &quot;type&quot;: &quot;STRING&quot;, &quot;value&quot;: &quot;CANNOT_FULFIL&quot;}, {&quot;name&quot;: &quot;status&quot;, &quot;type&quot;: &quot;STRING&quot;, &quot;value&quot;: &quot;CREATED&quot;}, {&quot;name&quot;: &quot;returnId&quot;, &quot;type&quot;: &quot;STRING&quot;, &quot;value&quot;: &quot;434877&quot;}, {&quot;name&quot;: &quot;returnRef&quot;, &quot;type&quot;: &quot;STRING&quot;, &quot;value&quot;: &quot;86a19a6a-1f64-4dc3-814d-4e3061a3d6d4&quot;}, {&quot;name&quot;: &quot;orderId&quot;, &quot;type&quot;: &quot;STRING&quot;, &quot;value&quot;: &quot;434788&quot;}, {&quot;name&quot;: &quot;orderRef&quot;, &quot;type&quot;: &quot;STRING&quot;, &quot;value&quot;: &quot;SEEDAUTEST150201&quot;},{&#xd;
    &quot;name&quot;: &quot;reference&quot;,&#xd;
    &quot;type&quot;: &quot;string&quot;,&#xd;
    &quot;value&quot;: &quot;ECP:123XDR&quot;&#xd;
  }],&#xd;
  &quot;meta&quot;: {&#xd;
    &quot;mode&quot;: &quot;ASYNC&quot;,&#xd;
    &quot;models&quot;: [&quot;INLINE MODE1&quot;],&#xd;
    &quot;simulation&quot;: true,&#xd;
    &quot;workflow&quot;: null&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${api_host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/${api_version}/${api_mapping}/${event_id}/audit</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID1" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">event_id1</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot; : &quot;(.*)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NULL</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Scope.variable">token</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert HTTP Status OK" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert event Id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-645647517">${event_id1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">event_id</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Article" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{  &#xd;
   &quot;meta&quot;:null,&#xd;
   &quot;name&quot;:&quot;ARTICLE_UPDATE&quot;,&#xd;
   &quot;type&quot;:&quot;GENERAL&quot;,&#xd;
   &quot;source&quot;:&quot;Fluent-API&quot;,&#xd;
   &quot;context&quot;:{  &#xd;
&#xd;
   },&#xd;
   &quot;category&quot;:&quot;ARTICLE&quot;,&#xd;
   &quot;accountId&quot;:&quot;${account_id}&quot;,&#xd;
   &quot;attributes&quot;:[  &#xd;
      {  &#xd;
         &quot;name&quot;:&quot;articleId&quot;,&#xd;
         &quot;type&quot;:&quot;STRING&quot;,&#xd;
         &quot;value&quot;:&quot;${articleId}&quot;&#xd;
      },&#xd;
      {  &#xd;
         &quot;name&quot;:&quot;entityType&quot;,&#xd;
         &quot;type&quot;:&quot;STRING&quot;,&#xd;
         &quot;value&quot;:&quot;ARTICLE&quot;&#xd;
      },&#xd;
      {  &#xd;
         &quot;name&quot;:&quot;orderId&quot;,&#xd;
         &quot;type&quot;:&quot;STRING&quot;,&#xd;
         &quot;value&quot;:&quot;${orderId}&quot;&#xd;
      },&#xd;
      {  &#xd;
         &quot;name&quot;:&quot;orderRef&quot;,&#xd;
         &quot;type&quot;:&quot;STRING&quot;,&#xd;
         &quot;value&quot;:&quot;${orderRef}&quot;&#xd;
      },&#xd;
      {  &#xd;
         &quot;name&quot;:&quot;returnId&quot;,&#xd;
         &quot;type&quot;:&quot;STRING&quot;,&#xd;
         &quot;value&quot;:&quot;${returnId}&quot;&#xd;
      },&#xd;
      {  &#xd;
         &quot;name&quot;:&quot;returnRef&quot;,&#xd;
         &quot;type&quot;:&quot;STRING&quot;,&#xd;
         &quot;value&quot;:&quot;${returnRef}&quot;&#xd;
      },&#xd;
      {  &#xd;
         &quot;name&quot;:&quot;fulfilmentId&quot;,&#xd;
         &quot;type&quot;:&quot;STRING&quot;,&#xd;
         &quot;value&quot;:&quot;${fulfilmentId}&quot;&#xd;
      },&#xd;
      {  &#xd;
         &quot;name&quot;:&quot;fulfilmentRef&quot;,&#xd;
         &quot;type&quot;:&quot;STRING&quot;,&#xd;
         &quot;value&quot;:&quot;${fulfilmentRef}&quot;&#xd;
      },&#xd;
      {  &#xd;
         &quot;name&quot;:&quot;articleRef&quot;,&#xd;
         &quot;type&quot;:&quot;STRING&quot;,&#xd;
         &quot;value&quot;:&quot;${articleRef}&quot;&#xd;
      },&#xd;
      {  &#xd;
         &quot;name&quot;:&quot;status&quot;,&#xd;
         &quot;type&quot;:&quot;STRING&quot;,&#xd;
         &quot;value&quot;:&quot;COLLECTED&quot;&#xd;
      },&#xd;
      {  &#xd;
      	&#xd;
         &quot;name&quot;:&quot;legacyId&quot;,&#xd;
         &quot;type&quot;:&quot;STRING&quot;,&#xd;
         &quot;value&quot;:&quot;${__RandomString(7,0123456789)}&quot;&#xd;
      }&#xd;
   ],&#xd;
   &quot;recordedBy&quot;:&quot;Fluent API&quot;,&#xd;
   &quot;recordedOn&quot;:&quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;)}&quot;,&#xd;
   &quot;retailerId&quot;:&quot;${retailer_id}&quot;,&#xd;
   &quot;generatedBy&quot;:&quot;JMeter Script&quot;,&#xd;
   &quot;generatedOn&quot;:&quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;)}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${api_host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/${api_version}/${api_mapping}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Random References For Entities" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
def consignmentId=Math.abs(new Random().nextInt() % 123456789) + 1
def fulfilmentId=Math.abs(new Random().nextInt() % 123456789) + 1
def inventoryId=Math.abs(new Random().nextInt() % 123456789) + 1
def transactionId=Math.abs(new Random().nextInt() % 123456789) + 1
def returnId=Math.abs(new Random().nextInt() % 123456789) + 1
def articleId=Math.abs(new Random().nextInt() % 123456789) + 1
def orderId=Math.abs(new Random().nextInt() % 123456789) + 1

vars.put(&quot;consignmentId&quot;, String.valueOf(consignmentId));
vars.put(&quot;fulfilmentId&quot;, String.valueOf(fulfilmentId));
vars.put(&quot;inventoryId&quot;, String.valueOf(inventoryId));
vars.put(&quot;transactionId&quot;, String.valueOf(transactionId));
vars.put(&quot;returnId&quot;, String.valueOf(returnId));
vars.put(&quot;articleId&quot;, String.valueOf(articleId));
vars.put(&quot;orderId&quot;, String.valueOf(orderId));

vars.put(&quot;orderRef&quot;, &apos;${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz)}-${__time(HHmmss,TIMESTAMP)}&apos;);
vars.put(&quot;returnRef&quot;, &apos;RET-${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm)}&apos;);
vars.put(&quot;fulfilmentRef&quot;, &apos;FUL-${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm)}&apos;);
vars.put(&quot;articleRef&quot;, &apos;ART-${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm)}&apos;);
vars.put(&quot;consignmentRef&quot;, &apos;CON-${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm)}&apos;);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert HTTP Status OK" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">event_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot; : &quot;(.*)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Scope.variable">token</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Article" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${api_host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/${api_version}/${api_mapping}?retailerId=${retailer_id}&amp;entityTypeFilter=ARTICLE&amp;from=${from_utc}&amp;to=${to_utc}&amp;query=${event_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert HTTP Status OK" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract total" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">_total</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;total&quot; : (.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Scope.variable">total</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert total" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49">1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">_total</stringProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract action" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">_action</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;action&quot; : &quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Scope.variable">total</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert action" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1785516855">UPDATE</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">_action</stringProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract entityType" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">_entity_type</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;entityType&quot; : &quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Scope.variable">total</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert entityType" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-14395178">ARTICLE</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">_entity_type</stringProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract status" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">_status</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;status&quot; : &quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Scope.variable">total</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="375118633">COLLECTED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">_status</stringProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract orderRef" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">_order_ref</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;orderRef&quot; : &quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Scope.variable">total</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert orderRef" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="941259713">${orderRef}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">_order_ref</stringProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract returnRef" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">_return_ref</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;returnRef&quot; : &quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Scope.variable">total</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert returnRef" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-292546639">${returnRef}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">_return_ref</stringProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract fulfilmentRef" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">_fulfilment_ref</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;fulfilmentRef&quot; : &quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Scope.variable">total</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert fulfilmentRef" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="305318603">${fulfilmentRef}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">_fulfilment_ref</stringProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract articleRef" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">_article_ref</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;articleRef&quot; : &quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Scope.variable">total</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert articleRef" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1837862697">${articleRef}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Scope.variable">_article_ref</stringProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="Core API &amp; Event API Load" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-1001437709">
            <stringProp name="1598">20</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="1598">20</stringProp>
            <stringProp name="53">5</stringProp>
          </collectionProp>
          <collectionProp name="393254073">
            <stringProp name="100">100</stringProp>
            <stringProp name="1598">20</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="1660">40</stringProp>
            <stringProp name="53">5</stringProp>
          </collectionProp>
          <collectionProp name="-503592205">
            <stringProp name="52469">500</stringProp>
            <stringProp name="1722">60</stringProp>
            <stringProp name="30">30</stringProp>
            <stringProp name="60">60</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
          <collectionProp name="-442449538">
            <stringProp name="50547">300</stringProp>
            <stringProp name="48625">100</stringProp>
            <stringProp name="30">30</stringProp>
            <stringProp name="60">60</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
          <collectionProp name="-782041836">
            <stringProp name="49586">200</stringProp>
            <stringProp name="49586">200</stringProp>
            <stringProp name="30">30</stringProp>
            <stringProp name="60">60</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
          <collectionProp name="-1316898689">
            <stringProp name="53">5</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="30">30</stringProp>
            <stringProp name="60">60</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="false">
          <intProp name="calcMode">0</intProp>
          <doubleProp>
            <name>throughput</name>
            <value>1200.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
          <doubleProp>
            <name>allowedThroughputSurplus</name>
            <value>10.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="batchSize">1</intProp>
          <intProp name="batchThreadDelay">0</intProp>
          <longProp name="duration">3600</longProp>
          <intProp name="exactLimit">1000</intProp>
          <longProp name="randomSeed">0</longProp>
          <doubleProp>
            <name>throughput</name>
            <value>720.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="throughputPeriod">60</intProp>
        </PreciseThroughputTimer>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="protocol" elementType="Argument">
              <stringProp name="Argument.name">protocol</stringProp>
              <stringProp name="Argument.value">${__P(protocol,https)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="api_server" elementType="Argument">
              <stringProp name="Argument.name">api_server</stringProp>
              <stringProp name="Argument.value">${__P(api_server,test.api.kjsd.com)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="port" elementType="Argument">
              <stringProp name="Argument.name">port</stringProp>
              <stringProp name="Argument.value">${__P(port,443)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="api_version" elementType="Argument">
              <stringProp name="Argument.name">api_version</stringProp>
              <stringProp name="Argument.value">v4.1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="account" elementType="Argument">
              <stringProp name="Argument.name">account</stringProp>
              <stringProp name="Argument.value">${__P(account,AVENGERS)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="auth_api_acc" elementType="Argument">
              <stringProp name="Argument.name">auth_api_acc</stringProp>
              <stringProp name="Argument.value">${__P(auth_api_acc,username=****&amp;password=****client_id=AVENGERS&amp;client_secret=bbe0b64a47d&amp;scope=api&amp;grant_type=password)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ramp_up_period" elementType="Argument">
              <stringProp name="Argument.name">ramp_up_period</stringProp>
              <stringProp name="Argument.value">${__P(ramp_up_period,1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="threads" elementType="Argument">
              <stringProp name="Argument.name">threads</stringProp>
              <stringProp name="Argument.value">${__P(threads,1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loop_count" elementType="Argument">
              <stringProp name="Argument.name">loop_count</stringProp>
              <stringProp name="Argument.value">${__P(loop_count,1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="results_file_path" elementType="Argument">
              <stringProp name="Argument.name">results_file_path</stringProp>
              <stringProp name="Argument.value">${__P(results_file_path,/tmp/fulfilment_options_performance.csv)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="from_date" elementType="Argument">
              <stringProp name="Argument.name">from_date</stringProp>
              <stringProp name="Argument.value">${__P(from_date,2019-03-08T08:00:34.184Z)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="to_date" elementType="Argument">
              <stringProp name="Argument.name">to_date</stringProp>
              <stringProp name="Argument.value">${__P(to_date,2019-03-10T23:30:34.184Z)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="job_id" elementType="Argument">
              <stringProp name="Argument.name">job_id</stringProp>
              <stringProp name="Argument.value">${__P(job_id,8)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="from_date1" elementType="Argument">
              <stringProp name="Argument.name">from_date1</stringProp>
              <stringProp name="Argument.value">${__P(from_date1,2019-03-10T00:00:34.184Z)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="to_date1" elementType="Argument">
              <stringProp name="Argument.name">to_date1</stringProp>
              <stringProp name="Argument.value">${__P(to_date1,2019-03-12T23:30:34.184Z)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="auth_api" elementType="Argument">
              <stringProp name="Argument.name">auth_api</stringProp>
              <stringProp name="Argument.value">${__P(auth_api,username=****&amp;password=*****client_id=AVENGERS&amp;client_secret=bhgfh7d&amp;scope=api&amp;grant_type=password)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="batch_id" elementType="Argument">
              <stringProp name="Argument.name">batch_id</stringProp>
              <stringProp name="Argument.value">13</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">bearer ${access_token}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">fluent.account</stringProp>
              <stringProp name="Header.value">${account}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name"></stringProp>
              <stringProp name="Header.value"></stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Authenticate Once" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authenticate" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${api_server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/oauth/token?${auth_api}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Access Token" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">access_token</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NULL</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Retailer ID" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">retailer_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Retailer_id&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NULL</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Retailer ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">retailer_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Retailer_id&quot;:([0-9]*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NULL</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="CORE API" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1101527363">Applications</stringProp>
            <stringProp name="314853881">CORE API</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Event API" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1101527363">Applications</stringProp>
            <stringProp name="2033794900">Event API</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="GQL API" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1101527363">Applications</stringProp>
            <stringProp name="978419068">GQL API</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="GQL API Load" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-1001438676">
            <stringProp name="1598">20</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="1598">20</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-727600167">
            <stringProp name="48625">100</stringProp>
            <stringProp name="1598">20</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="48687">120</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-1997983457">
            <stringProp name="52469">500</stringProp>
            <stringProp name="48687">120</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="48687">120</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="1843579419">
            <stringProp name="1507423">1000</stringProp>
            <stringProp name="49586">200</stringProp>
            <stringProp name="30">30</stringProp>
            <stringProp name="49586">200</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-442471108">
            <stringProp name="54391">700</stringProp>
            <stringProp name="49772">260</stringProp>
            <stringProp name="30">30</stringProp>
            <stringProp name="48687">120</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="1951365010">
            <stringProp name="52469">500</stringProp>
            <stringProp name="51508">400</stringProp>
            <stringProp name="30">30</stringProp>
            <stringProp name="60">60</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
          <collectionProp name="-545595657">
            <stringProp name="48625">100</stringProp>
            <stringProp name="51694">460</stringProp>
            <stringProp name="30">30</stringProp>
            <stringProp name="60">60</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="false">
          <intProp name="calcMode">0</intProp>
          <doubleProp>
            <name>throughput</name>
            <value>1200.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
          <doubleProp>
            <name>allowedThroughputSurplus</name>
            <value>10.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="batchSize">1</intProp>
          <intProp name="batchThreadDelay">0</intProp>
          <longProp name="duration">3600</longProp>
          <intProp name="exactLimit">1000</intProp>
          <longProp name="randomSeed">0</longProp>
          <doubleProp>
            <name>throughput</name>
            <value>2000.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="throughputPeriod">1</intProp>
        </PreciseThroughputTimer>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="protocol" elementType="Argument">
              <stringProp name="Argument.name">protocol</stringProp>
              <stringProp name="Argument.value">${__P(protocol,https)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="api_server" elementType="Argument">
              <stringProp name="Argument.name">api_server</stringProp>
              <stringProp name="Argument.value">${__P(api_server,test.api.kjsd.com)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="port" elementType="Argument">
              <stringProp name="Argument.name">port</stringProp>
              <stringProp name="Argument.value">${__P(port,443)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="api_version" elementType="Argument">
              <stringProp name="Argument.name">api_version</stringProp>
              <stringProp name="Argument.value">v4.1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="account" elementType="Argument">
              <stringProp name="Argument.name">account</stringProp>
              <stringProp name="Argument.value">${__P(account,AVENGERS)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="auth_api_acc" elementType="Argument">
              <stringProp name="Argument.name">auth_api_acc</stringProp>
              <stringProp name="Argument.value">${__P(auth_api_acc,username=****&amp;password=****client_id=AVENGERS&amp;client_secret=bbe0b64a47d&amp;scope=api&amp;grant_type=password)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ramp_up_period" elementType="Argument">
              <stringProp name="Argument.name">ramp_up_period</stringProp>
              <stringProp name="Argument.value">${__P(ramp_up_period,1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="threads" elementType="Argument">
              <stringProp name="Argument.name">threads</stringProp>
              <stringProp name="Argument.value">${__P(threads,1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loop_count" elementType="Argument">
              <stringProp name="Argument.name">loop_count</stringProp>
              <stringProp name="Argument.value">${__P(loop_count,1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="results_file_path" elementType="Argument">
              <stringProp name="Argument.name">results_file_path</stringProp>
              <stringProp name="Argument.value">${__P(results_file_path,/tmp/fulfilment_options_performance.csv)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="from_date" elementType="Argument">
              <stringProp name="Argument.name">from_date</stringProp>
              <stringProp name="Argument.value">${__P(from_date,2019-03-08T08:00:34.184Z)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="to_date" elementType="Argument">
              <stringProp name="Argument.name">to_date</stringProp>
              <stringProp name="Argument.value">${__P(to_date,2019-03-10T23:30:34.184Z)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="job_id" elementType="Argument">
              <stringProp name="Argument.name">job_id</stringProp>
              <stringProp name="Argument.value">${__P(job_id,8)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="from_date1" elementType="Argument">
              <stringProp name="Argument.name">from_date1</stringProp>
              <stringProp name="Argument.value">${__P(from_date1,2019-03-10T00:00:34.184Z)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="to_date1" elementType="Argument">
              <stringProp name="Argument.name">to_date1</stringProp>
              <stringProp name="Argument.value">${__P(to_date1,2019-03-12T23:30:34.184Z)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="auth_api" elementType="Argument">
              <stringProp name="Argument.name">auth_api</stringProp>
              <stringProp name="Argument.value">${__P(auth_api,username=****&amp;password=*****client_id=AVENGERS&amp;client_secret=bhgfh7d&amp;scope=api&amp;grant_type=password)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="batch_id" elementType="Argument">
              <stringProp name="Argument.name">batch_id</stringProp>
              <stringProp name="Argument.value">13</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">bearer ${access_token}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">fluent.account</stringProp>
              <stringProp name="Header.value">${account}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name"></stringProp>
              <stringProp name="Header.value"></stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Authenticate Once" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authenticate" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${api_server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/oauth/token?${auth_api}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Access Token" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">access_token</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NULL</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Retailer ID" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">retailer_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Retailer_id&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NULL</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Retailer ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">retailer_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Retailer_id&quot;:([0-9]*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NULL</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="GQL API" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1101527363">Applications</stringProp>
            <stringProp name="978419068">GQL API</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
